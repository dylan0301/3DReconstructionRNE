friend = 12 #nearby 크기
nearbyLeastDistance = 0.1 #1차랜색에서 지나치게 가까이 있는점은 잘못된데이터
r = 20 #이상점걸러내기용
OutlierThreshold = 8 #r 이내에 outlier 보다 적게있으면 이상점
normalLeastNorm = 0.1 #유의미한 벡터쌍들에 대해서만 법선벡터 계산
stdThreshold = 0.7 #표준편차 이거보다 크면 경계점
step_threshold = 20 #2차클러스터링에서 이값보다 더많이 점프하면 다른평면
numOfPoints = 5000 #generatepoint 점개수
ransacTrial1 = 20 #법선벡터구할때 랜색 시행횟수
ransacTrial2 = 20 #최종 평면 구할때 랜색 시행횟수
ransacThreshold1 = 20 #법선벡터구할때 랜색 오차허용범위
ransacThreshold2 = 10 #최종적으로 평면 만들때 쓰는 랜색 오차허용범위
howmanyclusters = 5


AllPoints = 모든 점
BoundaryPoints = 경계 점
CenterPoints = 경계가 아닌 점


#노이즈 제거
DistMat = [D_ij] where D_ij = Euclidean Distance(P_i, P_j)

모든 점 P_i에 대해서:
    DistMat[i] 에서 가장 P_i와 거리가 가까운 OutlierThreshold개의 점을 봄
    P_i와의 거리가 r 보다 큰 점이 있다면:
        AllPoints와 DistMat에서 P_i를 모두 삭제


#가장 가까운 friend개의 점을 찾기
모든 점 P_i에 대해서:
    P_i.nearby = DistMat[i]를 오름차순 정렬한 리스트
    P_i.nearby = P_i.nearby의 앞쪽 friend개의 점


#법선벡터 찾기
모든 점 P_i에 대해서:

    P_i와 P_i.nearby 점들로 RANSAC{
        ransacTrial1번 반복:
            아무 세 점을 골라서 평면을 만듦
            한 점에서 이 평면까 지 거리가 ransacThreshold1 이하면 그 점이 이 평면 모델을 만족한다고 취급.
        plane_normal = 가장 많은 점이 만족했던 평면의 아무 법선 벡터 
    }

    vectors = P_i.nearby에 있는 모든 점 Q_j에 대해서 <Q_j - P_i> 벡터들의 리스트
    
    vectors에 들어있는 모든 벡터쌍 (v_i, v_j)에 대해: (순서만 다른 것은 하나로 취급)
        n = v_i cross v_j
        n = nor벡터와 (-1)*nor 벡터 중 plane_normal과의 사이각이 작은 벡터
        normalize(n)
    normals = n들을 모두 모은 리스트

    normals의 모든 법선벡터 n에 대해:
        avg = n들의 합
    normalize(avg)

    n의 편차 = norm(avg - n)라 할때
    standardDeviation = normals의 표준편차
    
    if standardDeviation < stdThreshold:
        P_i는 평면 내부의 점
        CenterPoints.append(P_i)
        P_i.normal = avg #이거 랜색벡터로 하자
        
    else:
        P_i는 경계의 점
        BoundaryPoints.append(P_i)
        P_i.normal = None





모든 CenterPoints들에 대해서:
    그 점의 법선 벡터를 정반대 방향으로 복제한다.

복제된 결과의 법선벡터를 howmanyclusters*2개의 클러스터로 계층적 클러스터링한다.

생성된 각각 대칭된 한 쌍의 클러스터에 대해서:
    두 클러스터 중 하나의 클러스터를 임의로 제거한다.

남은 각각의 클러스터에 대해서:
    법선 벡터들을 모두 평균 낸 벡터를 avgVec라고 하자.
    avgVec을 법선 벡터로 가지는 평면 L을 다음과 같이 정의하자. (ax + by + cz = 0)
    빈 리스트 distList를 정의하자.
    클러스터 안의 각각의 점들에 대해서:
        그 점과 L 사이의 거리와 그 점을 담은 튜플을 distList에 append하자.
    distList를 첫 번째 원소를 기준으로 정렬한다.
    distList의 각각의 원소에 대해서:
        if 이전 원소의 차가 step_threshold 이상이면:
            새로운 클러스터로 취급한다.
        else:
            기존 클러스터로 취급한다.
    나눠진 각각의 클러스터에 대해서:
        RANSAC으로 알맞은 평면을 찾는다.
        
각각의 BoundaryPoints에 대해서:
    가장 가까운 BoundaryPoints friend2개를 담은 리스트를 BoundaryPoints[i].nearby라고 하자.
    BoundaryPoints[i].nearby의 원소 중 거리가 r2 이상인 점들을 제거하자.
    if 남은 점들이 OutlierThreshold2개 이하라면:
        BoundaryPoints[i]를 제거한다.
    else:
        각각의 평면 클러스터에 대해서:
            그 평면과 BoundaryPoints[i] 간의 거리를 계산한다.
            만약 이전에 나왔던 거리의 최솟값보다 거리가 작다면:
                평면과 최솟값을 기록한다.
        그 최솟값 평면에 경계점을 projection 시킨다.
        



